plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp' version "$kotlin_version-1.0.9"
    // id 'org.jetbrains.dokka'
}

android {
    namespace 'com.arnyminerz.androidmatic'
    compileSdk 33

    defaultConfig {
        applicationId "com.arnyminerz.androidmatic"
        minSdk 21
        targetSdk 33
        versionCode 9
        versionName "1.0.0-rc05"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        def locales = getLocales()
        buildConfigField "String[]", "TRANSLATION_ARRAY", "new String[]{\"" + locales.join("\",\"") + "\"}"
        resConfigs locales

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

//dokkaHtml.configure {
//    dokkaSourceSets {
//        named("main") {
//            noAndroidSdkLink.set(false)
//        }
//    }
//}

import static groovy.io.FileType.DIRECTORIES

/**
 * Obtains a list of all the available locales
 * @since 20220928
 * @return A list with the language codes of the locales available.
 */
static def getLocales() {
    // Initialize the list English, since it's available by default
    def list = ["en"]
    // Get all directories inside resources
    def dir = new File("./app/src/main/res")
    dir.traverse(type: DIRECTORIES, maxDepth: 0) { file ->
        // Get only values directories
        def fileName = file.name
        if (!fileName.startsWith("values-")) return

        // Take only the values directories that contain strings
        def stringsFile = new File(file, "strings.xml")
        if (!stringsFile.exists()) return

        // Add to the list the locale of the strings file
        list.add(fileName.substring(fileName.indexOf('-') + 1))
    }
    // Log the available locales
    println "Supported locales: " + list.join(", ")
    // Return the built list
    return list
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'

    // Jetpack Compose Base
    implementation platform("androidx.compose:compose-bom:$compose_bom_version")
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.ui:ui-tooling-preview"
    implementation 'androidx.activity:activity-compose:1.6.1'

    // Jetpack Compose - Live Data
    implementation 'androidx.compose.runtime:runtime-livedata:1.4.0-beta01'

    // Jetpack Compose - Icons
    implementation "androidx.compose.material:material-icons-extended"

    // Jetpack Compose - Material
    implementation 'androidx.compose.material:material'

    // Jetpack Compose - Material 3
    implementation 'androidx.compose.material3:material3:1.0.1'

    // Jetpack Compose - Accompanist
    def accompanist_version = "0.30.0"
    implementation "com.google.accompanist:accompanist-placeholder-material:$accompanist_version"
    implementation "com.google.accompanist:accompanist-pager:$accompanist_version"

    // Jetpack Compose - Glance Widgets
    implementation "androidx.glance:glance-appwidget:1.0.0-alpha05"

    // Volley web request SDK
    implementation 'com.android.volley:volley:1.2.1'

    // Timber logger
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // Room storage
    def room_version = "2.5.0"
    implementation "androidx.room:room-ktx:$room_version"
    ksp "androidx.room:room-compiler:$room_version"

    // DataStore preference storage
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // WorkManager for running background jobs
    def work_version = "2.8.0"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // Kotlin reflect for generic classes
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // KotlinX coroutines for Play Services
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.7.0'

    // Dokka documentation dependencies
    // dokkaHtmlPlugin "org.jetbrains.dokka:kotlin-as-java-plugin:$kotlin_version"

    // Testing libraries
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4"
    debugImplementation "androidx.compose.ui:ui-tooling"
    debugImplementation "androidx.compose.ui:ui-test-manifest"
}
